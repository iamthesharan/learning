lets say we have a function that basically merges 2 objects and returns a new object

function merge(obj1:object, obj2:object){
    return Object.assign(obj1, obj2);// This function will merge the objects
}
console.log(merge({name:"Shashank"},{age:25})); // This will work Perfectly fine.

But if we try to strore it in Object and access the field

const mergeObject=merge({name:'Shashank'},{age:25});

mergeObject.name; // we cannot access the attributes because TS doesn't know this
So here the TS, inside the merge function it is taking two parameters as an object and returning the object.
But we aren't providing much Information.

1. One Solution is we can Typecast this method.

    const mergeObject=merge({name:'Shashank'},{age:25}) as {name:string; age:number};
    But that's not a good idea.

2. Second approach is to turn the function to the generic Function

    function merge<T,U>(obj1:T, obj2:U){ 
        // So the first paramether is of type T and 2nd is of U and the return type of this method will be the inersection of T & U
        return Object.assign(obj1, obj2);
    }

    So now if we access the field

    const mergeObject=merge({name:'Shashank'},{age:25});
    mergeObject.name; we can able to access

    as the type of the object returned will be:
    {
        name:string;
    } & {
        age:number;
    }

    Initially when we used the parameter type as object and object then the return type of the method was object & object which is an Object..
    Also T and U will fill the types dynamically

    Also you don't need to Explicitly define the types while storing.
    const mergeObject=merge<{name:string},{age:number}>({name:'Shashank'},{age:25});