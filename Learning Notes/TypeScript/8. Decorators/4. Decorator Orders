It is really Inportant to Understand which decorator will Execute First.

function Logger(logString:string){
    return function(constructor:Function){
        console.log("Rendering Logs");
        console.log(logString);
    }
}


function WithTemplate(template:string, hookId:string){
    return function(constructor:any){
        console.log("Rendering Template");
        const hookEl=document.getElementById(hookId);
        const p=new constructor();
        if(hookEl){
            hookEl.innerHTML=template;
            hookEl.querySelector('h1')!.textContent=p.name;
        }
    }
}

@Logger('Logging')
@withTemplate('<h1></h1>','app')
class Person{
    name="Shashank"
    constructor(){
        console.log(this.name);
    }
}

In the above example 2nd Decorator Function First Executes then the First Decorator Function Executes.

Rendering Template
Rendering Logs


But there is a diffrence when the DEcorator Factory Executes.

Lets say we have the below lines of code added in the above decorator factory

It is really Inportant to Understand which decorator will Execute First.

function Logger(logString:string){
    console.log("LOGGER FACTORY")
    return function(constructor:Function){
        console.log("Rendering Logs");
        console.log(logString);
    }
}


function WithTemplate(template:string, hookId:string){
    console.log("TEMPLATE FACTORY");
    return function(constructor:any){
        console.log("Rendering Template");
        const hookEl=document.getElementById(hookId);
        const p=new constructor();
        if(hookEl){
            hookEl.innerHTML=template;
            hookEl.querySelector('h1')!.textContent=p.name;
        }
    }
}

So in the LOGGER FACTORY will execute first and later TEMPLATE FACTORY.

