/* A decorator is a just a function. A Function that you apply to a class in a certain way */

function Logger(constructor:Function){
    console.log('Logging...');
    console.log(constructor);
}

@Logger /* Note Decorator function Requires at least 1 argument */
class Person{
    name ="Max";
    constructor(){
        console.log('Creating Person Object');
    }
}

const person=new Person();
console.log(person);

/* Decorators Execute Before the class is defined. and not when instantiated */


Syntax for Class Decorator:

function myFunction(target){
    // Do something with Target
}

https://medium.com/jspoint/anatomy-of-typescript-decorators-and-their-usage-patterns-487729b34ae6.

This argument confuses some people since we are decorating a class and the argument received is the constructor function. Whatâ€™s up with that? Well, class is a fancy keyword we received in ES6 to create classes. But under the hood (in JavaScript engine), it is broken down to a constructor function and prototype. The above program is analogous to the below program.
function Person(fname, lname) {
    this.fname = fname;
    this.lname = lname;
}
Person.version = 'v1.0.0';
Person.prototype.getFullName = function() {
    return this.fname + ' ' + this.lname;
}
So the constructor function we are talking about is the Person function in the above example. This is what we receive in the decorator function as the only argument. It also has the prototype as the static property with it. So whenever somebody says a class, imagine a constructor function with the body of the class.constructor method and its prototype having all the instance methods of that class.