class Course{
    title:string;
    price:number;
    constructor(title:string, price:number){
        this.title=title;
        this.price=price;
    }
}

const courseForm=document.querySelector('form')!;
courseForm.addEventListener('submit',event=>{
    event.preventDefault();
    const titleEl=document.getElementById('title')! as HTMLInputElement;
    const priceEl=document.getElementById("price")! as HTMLInputElement;

    const title=titleEl.value;
    const price=parseInt(priceEl.value);

    const createCourse=new Course(title,price);
    console.log(createCourse); // Here if We provide blank value it will also create a course.
    // So we need to put the code above for validation Logic. But that will not be a good approach
    // The Best Approach will be creating a validation logic in class by creating a decorator
});
=======================================================================================

interface validatorConfig{
    [property:string]:{ // property will store the class name
        [validatableProp:string]:string[]; // this will store the properties of the class on which validators are attached
        //['required','positive'] like this
    };
}

const registerValidatiors:validatorConfig={};
const Mandatory=(target:any, propName:string)=>{
    registerValidatiors[target.constructor.name]={
        ...registerValidatiors[target.constructor.name],
        [propName]:[...(registerValidatiors[target.constructor.name]?.[propName]??[]),'mandatory']
    };
}
const PositiveNumber=(target:any, propName:string)=>{
    registerValidatiors[target.constructor.name]={
        ...registerValidatiors[target.constructor.name],
        [propName]:[...(registerValidatiors[target.constructor.name]?.[propName]??[]),'positive']
    };
}

const validate=(obj:any)=>{
    const objValidatorConf=registerValidatiors[obj.constructor.name]; 
    if(!objValidatorConf){
        // We might not find this if we try to use the object for which validator config wasn't regiestered
        return true;
    }
    let  isValid=true;
    for(const prop in objValidatorConf){
        for(const validator of objValidatorConf[prop]){
            switch(validator){
                case 'mandatory':
                    isValid=isValid && !!obj[prop];
                    break;
                case 'positive':
                    isValid=isValid && obj[prop]>0;
                    break;
            }
        }
    }
    return isValid;
}



class Course{

    @Mandatory
    title:string;
    @PositiveNumber
    price:number;
    constructor(title:string, price:number){
        this.title=title;
        this.price=price;
    }
}


const courseForm=document.querySelector('form')!;
courseForm.addEventListener('submit',event=>{
    event.preventDefault();
    const titleEl=document.getElementById('title')! as HTMLInputElement;
    const priceEl=document.getElementById("price")! as HTMLInputElement;

    const title=titleEl.value;
    const price=+priceEl.value;
    const createCourse=new Course(title,price);
    if(!validate(createCourse)){
        alert("Hi There");
        return;
    }
    console.log(createCourse);
});
