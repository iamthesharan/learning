To make a Directive we need to use @Directive Decorator over the class.

@Directive({
    selector:'[appBasicHighlight]' // we require selector because this defines how we add this directive
})
export class BasicHighlightDirective implements OnInit{
    constructor(private elementRef:ElementRef){
        // Angular will give ElementRef object via injection
        elementRef.
    }
    ngOnInit(){
        this.elementRef.nativeElement.style.backgroundColor='green'; // Nut this is the wrong Approach
    }
}

======================================================================================================

Good Approach is using a Renderer.

create a directive :
ng g d better-highlight



@Directive({
  selector: '[appBetterHighlight]'
})
export class BetterHighlightDirective implements OnInit{

  constructor(private elementRef:ElementRef, private renderer:Renderer2) { }
  ngOnInit(){
    this.renderer.setStyle(this.elementRef.nativeElement,'background-color','lightBlue');
  }
}

=========================================================================================================

Other Renderer Methods:

abstract class Renderer2 {
  abstract data: {...}
  destroyNode: ((node: any) => void) | null
  abstract destroy(): void
  abstract createElement(name: string, namespace?: string): any
  abstract createComment(value: string): any
  abstract createText(value: string): any
  abstract appendChild(parent: any, newChild: any): void
  abstract insertBefore(parent: any, newChild: any, refChild: any, isMove?: boolean): void
  abstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void
  abstract selectRootElement(selectorOrNode: any, preserveContent?: boolean): any
  abstract parentNode(node: any): any
  abstract nextSibling(node: any): any
  abstract setAttribute(el: any, name: string, value: string, namespace?: string): void
  abstract removeAttribute(el: any, name: string, namespace?: string): void
  abstract addClass(el: any, name: string): void
  abstract removeClass(el: any, name: string): void

  abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void
  
  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void
  abstract setProperty(el: any, name: string, value: any): void
  abstract setValue(node: any, value: string): void
  abstract listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void
}