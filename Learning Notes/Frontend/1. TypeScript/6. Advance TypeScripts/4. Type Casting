Suppose we have a paragraph tag in our HTML Document.
<p>Hi There! Sharan</p>

const paragraph=document.querySelector('p'); // This method may return null if no paragraph selector found in the document
    Now here the type of the praragraph variable will be HTMLParagraphElement | null. 
    The TS automatically finds out this is the paragraph Element.



const userInputVariable=document.getElementById("message-output");
    Now here the Type will be just HTMLElement | null

Now if we try to do
    userInputVariable.value="Hello World"; // Here we will get an error because the object may be null.

    So here we need to provide !

    const userInputVariable=document.getElementById("message-output")!;    

however this will only ensures that the Element is not null.
For being more specific we need to do type casting

There are two ways of Type Casting.
1. Putting <> in front.

    const userInputElement=<HTMLInputElement>document.getElementById("message-output")!; 

2. Using as keyword.

    const userInputElement=document.getElementById("message-output")! as HTMLInputElement; 

        userInputVariable.value='Hi There!';

If you are sure that the Element will not return null, then you can use !.
But in case if you're not sure, then in that case then you can use if Statement

if(userInputElement){
    userInputVariable.value="Hi There!"; // This will throw an error because vaue is not defined for HTMLElement
}

So here we need to typecast.

if(userInputElement){
    (userInputVariable as HTMLInputElement).value="Hi There!";
}



