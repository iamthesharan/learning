Lets Create a WithTemplate Decorator that will Render the content on our HTML Page based on the Argument that we provide.

Lets Say we have A class Person and we want to display the name of the person in an h1 Tag.

Step 1: Create a TS Class.

    class Person{
        name="Shashank Sharan";
        constructor(){
            console.log(this.name + "will be printed on the Screen");
        }
    }

Step 2: Now We create a WithTemplate Decorator that will take 2 agruments. 
        1. Where the Content needs to be Rendered.
        2. How Content that needs to be Rendered.

        1. Where the Content needs to be Rendered.

            For this we need to create a div in our HTML document with id.

            lets say <div id="app"></div>
        
        2. How Content that needs to be Rendered

            now we need to pass  argument in decorator with template and ID.

            @WithTemplate('<h1></h1>','app')
            class Person{
                name="Shashank Sharan";
                constructor(){
                    console.log(this.name + "will be printed on the Screen");
                }
            }

Step 3: Create a Decorator Function.

        So our Decorator funciton will take 2 Arguments.

        function WithTemplate(template:string, hookId:string){
            return function(constructor:Function){ 
                const hookEl=document.getElementBuId(hookId);
                if(hookEl){
                    hookEl.innerHTML=template;
                }
            }
        }

You can also access the class values inside the Decorator function and print it in template.

            function WithTemplate(template:string, hookId:string){
                return function(constructor:any){ // Changed it to any because the TS will not assume that its a normal function. 
                    const hookEl=document.getElementBuId(hookId);
                    const person=new constructor(); // this line will give error if the constructor type is a function. you cannot use new keyword with function.
                    if(hookEl){
                        hookEl.innerHTML=template;
                        hookEl.querySelector('h1')!.textContent=person.name; // added new line here
                    }
                }
            }
