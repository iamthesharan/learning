Accessor Decorator function Receives 3 Arguments

function Log2(target:any, name:string, descriptor:PropertyDescriptor){

    //target --> prototype
    //name --> name of the Accessor. In this case its setPrice
    //descriptor --> Description of the accessor

    console.log("Accessor Decorator");
    console.log(target);
    console.log(name);
    console.log(descriptor);
}

class Product {

    @Log           // we can add the decorator to the property.
    title:string;
    price:number;
    constructor(title:string, price:number){
        this.title=title;
        this.price=price;
    }

    @Log2       // Accessor Decorator
    set setPrice(price:number){
        if(price>0)
            this.price=price;
        else
            throw new Error("Invalid Price! Must be greater than -1");
    }

    getPriceWithTax(tax:number){
        return this.price * (1+tax);
    }

}

===============================================================================================================

Method Decorator: Method Decorator also accepts 3 arguments.

function Log3(target : any, name:string | Symbol, descriptor:PropertyDescriptor){
    //target --> prototype
    //name --> name of the Method. In this case its getPriceWithTax
    //descriptor --> Description of the Method
    console.log("Method Decorator");
    console.log(target);
    console.log(name);
    console.log(descriptor);
}

    @Log3
    getPriceWithTax(tax:number){
        return this.price * (1+tax);
    }

===============================================================================================================

Parameter: Parameter Decorator also accepts 3 parameter. 

function Log4(target:any, name:string | Symbol, position:number){
    //target --> prototype
    //name --> name of the Method. In this case its getPriceWithTax
    //position --> position of the argument. in this case its 1st

    console.log("Parameter Decorator");
    console.log(target);
    console.log(name);
    console.log(position);
}


   @Log3
    getPriceWithTax(@Log4 tax:number){
        return this.price * (1+tax);
    }