POST Construct is basically the method will be called after the execution of the constructor.
PRE Construct will be called before the destructions of the bean


    @PostConstruct
    public void doSomeInitStuff(){
        
    }
    
    
    @PreDestroy
    public void doSomeDestructionStuff(){
        
    }
    
    
---------------------------------------------------------------------------------------------------------------
    
    
In contrast to the other scopes, Spring does not manage the complete lifecycle of a
prototype bean: the container instantiates, configures, and otherwise assembles a
prototype object, and hands it to the client, with no further record of that prototype
instance.

Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, in the case of prototypes, configured destruction lifecycle callbacks are not called. The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding. 

To get the Spring container to release resources held by prototype-scoped beans, try using a custom bean post-processor, which holds a reference to beans that need to be cleaned up.



1. Create a custom bean processor. This bean processor will keep track of prototype scoped beans. During shutdown it will call the destroy() method on the prototype scoped beans.

2. The prototype scoped beans MUST implement the DisposableBean interface. This interface defines a "destroy()" method. This method should be used instead of the @PreDestroy annotation.

3.  In this app, BeanProcessorDemoApp.java is the main program. TennisCoach.java is the prototype scoped bean. TennisCoach implements the DisposableBean 
    interface and provides the destroy() method. The custom bean processing is handled in the MyCustomBeanProcessor class.




    
    
    package com.luv2code.springdemo;

    import javax.annotation.PostConstruct;

    import org.springframework.beans.factory.DisposableBean;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Scope;
    import org.springframework.stereotype.Component;

    @Component
    @Scope("prototype")
    public class TennisCoach implements Coach, DisposableBean {

        @Autowired
        private FortuneService fortuneService;

        @PostConstruct
        public void doMyStartupStuff() {
            System.out.println(">> TennisCoach: inside doMyStartupStuff()");
        }

        @Override
        public String getDailyWorkout() {
            return "Practice your backhand volley";
        }

        @Override
        public String getDailyFortune() {
            return fortuneService.getFortune();
        }

        @Override
        public void destroy() throws Exception {
            System.out.println(">> TennisCoach: inside destroy()");

        }

    }
