We can declare type parameter either at class level or method level. 

Declaring type parameter at class level

class Test<t>{
    // We can use T within this class based on our Requirements.
}


Declaring type parameter at method level. we have to declare type parameter just before return type.

class test{

    public <T> void m1(T ob){
        //we can use T anywhere in this method based on our requirement
    }
}



================================

Valid Scenarios:
public <T extends Number> void m1(){
    
}


public <T extends Runnable> void m1(){
    
}


public <T extends Number & Runnable> void m1(){
    
}

public <T extends Number& Comparable & Runnable > void m1(){
    
}



==============================================================


Communication with Non Generic Code.

If we send genric object to non genric area, it will behave like non generic object
If we send non generic object to generic area, it will start behaving like generic object



class test{
    public static void m1(AL l){
        // Non generic area. We can add any object.
        l.add(10.5);
        l.add(10);
        l.add()
    }
    public static void main(String ...args){
        AL <String> l=new AL<String>();
        l.add("Shashank");
        l.add("Sharan");
        m1(l);
        sop(l);  // [Shashank, Sharan, 10.5, 10] --> valid
        l.add(10); // invalid --> this is genric Area
    }
}



===============================================================


There is no concept of generics during runtime. its only applicable in compile time.

AL l=new AL<String>();
l.add(10); // Passed, not generic
l.add(10.5); // Passed, not generic
SOP(l); // [10,10.5]  i.e at runtime, generic types behaves as normal types.
