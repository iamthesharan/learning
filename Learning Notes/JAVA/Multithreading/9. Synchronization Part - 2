If multiple threads operating on the same java object, then Sync is reqired.
If multiple Threads operating on the diffrent java object then Sync is not required.

In Previous Example lets suppose we have 2 Display Objects:

public class SynchronizedDemo {
	public static void main(String ...args) {
		Display d1=new Display();
        Display d2=new Display();
		MyThread t1=new MyThread(d1,"Sharan");
		MyThread t2=new MyThread(d2,"Kiran");
		t1.start();
		t2.start();
	}
}

No Sync required in above case for Wish method.

===================================================================================================================

Now Suppose if the wish method is static and Synchronized
public class Display {
	public static Synchronized void wish(String name) {
		for(int i=0;i<10;i++) {
			System.out.print("Good Morning:");
			try {
				Thread.sleep(2000);
			}
			catch(InterruptedException exc) {
				exc.printStackTrace();
			}
			System.out.println(name);
		}
	}
}


class MyThread extends Thread{
	Display d;
	String name;
	MyThread(Display d, String name){
		this.d=d;
		this.name=name;
	}
	public void run() {
		d.wish(name);
	}
}


public class SynchronizedDemo {
	public static void main(String ...args) {
		Display d=new Display();
		MyThread t1=new MyThread(d,"Sharan");
		MyThread t2=new MyThread(d,"Kiran");
		t1.start();
		t2.start();
	}
}

Now If the wish method is static and Synchronized, then the thread will require Class level lock and the output will be regular.
Note ** If thread wants to execute Static and Synchronized method then the thread required Class level lock.

Class Level Lock:
Every Class in java has a unique lock which is class level lock.

=========================================================================================================================

Now Important Concept: How Threads will work when there is a class level lock.
https://youtu.be/945WfTjpF2w?list=PLd3UqWTnYXOkWZUcbW68CbN9fyPFQ0LDk&t=1391


While a thread excuting Static Synchronized method, the remaining threads are not allowed to execute any static Synchronized method of that class simultaneously. But remaining threads are allowed to execute the floowing methods simultaneously.

1. Normal Static methods
2. Synchronized Instance Methods
3. Normal Instance Methods

===============================================================================================================================

Lets Say We have a Display class which has 2 methods:
	1. displayn()
	2. displayc()


public class Display {
	public void displayn() {
		for(int i=0;i<10;i++) {
			System.out.println(i);
			try {
				Thread.sleep(500);
			}
			catch(InterruptedException exc) {
				exc.printStackTrace();
			}
		}
	}
	public void displayc() {
		for(int i=0;i<10;i++) {
			System.out.println((char)i);
			try {
				Thread.sleep(500);
			}
			catch(InterruptedException exc) {
				exc.printStackTrace();
			}
		}
	}
}

Now I want to define 2 Thread Classes:

	1. MyThread1 : on which we call displayn() method inside run method
	2. MyThread2 : on which we call displayc() method inside run method


	public class MyThread1 extends Thread{
		Display d;
		MyThread1(Display d){
			this.d=d;
		}
		public void run() {
			d.displayn();
		}
	}


	public class MyThread2 extends Thread{
		Display d;
		MyThread2(Display d){
			this.d=d;
		}
		public void run() {
			d.displayc();
		}
	}


	public class SynchronizedDemo {
		public static void main(String ...args) {
			Display d=new Display();
			MyThread1 t1=new MyThread1(d);
			MyThread2 t2=new MyThread2(d);
			t1.start();
			t2.start();
		}
	}

	Now We are calling thread 1 and 2 on the same display object. And hence the output will be irregular because methods in Display class is not Synchronized.


	But once we declare both the methods as Synchronized, The output will be regular. Either Thread1 or Thread2 will execute first and then after completion of that thread, another thread will execute.